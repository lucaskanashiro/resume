%@article{friggeri:2011:inria-00490195:2,
  %AUTHOR = {Friggeri, Adrien and Chelius, Guillaume and Fleury, Eric and Fraboulet, Antoine and Mentr{\'e}, France and Lucet, Jean-Christophe},
  %TITLE = {{Reconstructing Social Interactions Using an unreliable Wireless Sensor Network}},
  %JOURNAL = {{Computer Communications}},
  %PUBLISHER = {Elsevier},
  %VOLUME = {34},
  %NUMBER = {5},
  %PAGES = {609--618},
  %YEAR = {2011},
  %MONTH = Apr,
  %KEYWORDS = {complex networks; interaction networks; wireless sensor networks; medical applications},
  %DOI = {10.1016/j.comcom.2010.06.005},
  %URL = {http://hal.inria.fr/inria-00490195}
%}

%@inproceedings{friggeri:2010:inria-00475921:1,
  %AUTHOR = {Friggeri, Adrien and Chelius, Guillaume},
  %TITLE = {{Biais dans les mesures obtenues par un r{\'e}seau de capteurs sans fil}},
  %BOOKTITLE = {{12{\`e}mes Rencontres Francophones sur les Aspects Algorithmiques de T{\'e}l{\'e}communications (AlgoTel)}},
  %YEAR = {2010},
  %EDITOR = {Maria Gradinariu Potop-Butucaru and Herv{\'e} Rivano},
  %KEYWORDS = {france},
  %ADDRESS = {Belle Dune, France},
  %MONTH = Jun,
  %URL = {http://hal.inria.fr/inria-00475921}
%}

%@misc{friggeri:2011:inria-00605673:1,
  %AUTHOR = {Friggeri, Adrien and Fleury, Eric},
  %TITLE = {{Des triangles pour mesurer la coh{\'e}sion sociale : Fellows, une exp{\'e}rimentation sur Facebook}},
  %YEAR = {2011},
  %MONTH = Jun,
  %KEYWORDS = {france},
  %NOTE = {S{\'e}minaire w2s @ La Cantine},
  %URL = {http://hal.inria.fr/inria-00605673}
%}

%@book{allsopp07,
%author = {John Allsop},
%title = {Microformats: Empowering Your Markup for Web 2.0},
%isbn = {1-59059-814-8},
%publisher = {Publisher},
%address = {London},
%month = mar,
%year = {2007},
%}

@INPROCEEDINGS{7975747,
author={L. Kanashiro and A. Ribeiro and D. Silva and P. Meirelles and A. Terceiro},
booktitle={2017 12th Iberian Conference on Information Systems and Technologies (CISTI)},
title={A study on low complexity models to predict flaws in the Linux source code},
year={2017},
pages={1-6},
abstract={Due to the constant evolution of technology, each day brings new programming languages, development paradigms, and ways of evaluating processes. This is no different with source code metrics, where there is always new metric classes. To use a software metric to support decisions, it is necessary to understand how to perform the metric collection, calculation, interpretation, and analysis. The tasks of collecting and calculating source code metrics are most often automated, but how should we monitor them during the software development cycle? Our research aims to assist the software engineer to monitor metrics of vulnerability threats present in the source code through a reference prediction model, considering that real world software have non-functional security requirements, which implies the need to know how to monitor these requirements during the software development cycle. As a first result, this paper presents an empirical study on the evolution of the Linux project. Based on static analysis data, we propose low complexity models to study flaws in the Linux source code. About 391 versions of the project were analyzed by mining the official Linux repository using an approach that can be reproduced to perform similar studies. Our results show that it is possible to predict the number of warnings triggered by a static analyzer for a given software project revision as long as the software is continuously monitored.},
keywords={Complexity theory;Data models;Linux;Measurement;Monitoring;Predictive models;Software;Common Weakness Enumeration;Linux;Prediction;Source Code Metrics;Source Code Static Analysis},
doi={10.23919/CISTI.2017.7975747},
month={June},}

@inproceedings{Meirelles:2017:BPS:3125433.3125471,
 author = {Meirelles, Paulo and Wen, Melissa and Terceiro, Antonio and Siqueira, Rodrigo and Kanashiro, Lucas and Neri, Hilmer},
 title = {Brazilian Public Software Portal: An Integrated Platform for Collaborative Development},
 booktitle = {Proceedings of the 13th International Symposium on Open Collaboration},
 series = {OpenSym '17},
 year = {2017},
 isbn = {978-1-4503-5187-4},
 location = {Galway, Ireland},
 pages = {16:1--16:10},
 articleno = {16},
 numpages = {10},
 url = {http://doi-acm-org.ez67.periodicos.capes.gov.br/10.1145/3125433.3125471},
 doi = {10.1145/3125433.3125471},
 acmid = {3125471},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Free Software, Management Team, Software Integration},
 abstract = {The Brazilian Public Software (SPB) is a program promoted by the Brazilian Federal Government to foster sharing and collaboration on Free/Libre/Open Source Software (FLOSS) solutions for the public administration. In this context, a public software is considered a public good and the Federal Government assumes some responsibilities related to its use. Once its devolpment principles is the same of the FLOSS projects, we have designed the SPB Portal, a platform based on the integration and evolution of existing FLOSS tools. It provides several modern features for software collaborative development, helping the Brazilian public administration in sharing its solutions. In this paper, we present this integrated software development platform that was developed for the SPB program by a heterogeneous team composed by professors, master students and undergraduate students, as well as by professionals from FLOSS communities. The development of this platform used several FLOSS projects, providing a non-trivial integration among them. This effort has also produced several new features that were contributed back to these projects. Alongside the architectural challenges, we also discuss in this paper our work process, based on agile and free software development practices, and the lessons learned during 30 months of work on the SPB project.}
}

@article{LIMA2018163,
title = "A Metrics Suite for code annotation assessment",
journal = "Journal of Systems and Software",
volume = "137",
pages = "163 - 183",
year = "2018",
issn = "0164-1212",
doi = "https://doi.org/10.1016/j.jss.2017.11.024",
url = "http://www.sciencedirect.com/science/article/pii/S016412121730273X",
author = "Phyllipe Lima and Eduardo Guerra and Paulo Meirelles and Lucas Kanashiro and Hélio Silva and Fábio Fagundes Silveira",
keywords = "Code annotation, Software metrics, Thresholds",
abstract = "Code annotation is a language feature that enables the introduction of custom metadata on programming elements. In Java, this feature was introduced on version 5, and today it is widely used by main enterprise application frameworks and APIs. Although this language feature potentially simplifies metadata configuration, its abuse and misuse can reduce source code readability and complicate its maintenance. The goal of this paper is to propose software metrics regarding annotations in the source code and analyze their distribution in real-world projects. We have defined a suite of metrics to assess characteristics of the usage of source code annotations in a code base. Our study collected data from 24947 classes extracted from open source projects to analyze the distribution of the proposed metrics. We developed a tool to automatically extract the metrics and provide a full report on annotations usage. Based on the analysis of the distribution, we defined an appropriate approach for the calculation of thresholds to interpret the metric values. The results allow the assessment of annotated code characteristics. Using the thresholds values, we proposed a way to interpret the use of annotations, which can reveal potential problems in the source code."
}

@conference{smartgreens18,
title={Analyzing Urban Mobility Carbon Footprint with Large-scale, Agent-based Simulation},
author={Santana, Eduardo Felipe Zambom and Kanashiro, Lucas and Tomasiello, Diego Bogado and Kon, Fabio and Giannotti, Mariana},
booktitle={Proceedings of the 7th International Conference on Smart Cities and Green ICT Systems},
year={2018},
 location = {Funchal, Madeira - Portugal},
keywords={Smart Cities, Urban Mobility, Simulation, Carbon Footprint},
abstract={The growth of cities around the world bring new challenges to urban management and planning. Tools, such as simulators, can help the decision-making process by enabling the understanding of the current situation of the city and comparison of multiple scenarios with regard to changes in the urban infrastructure and in public policy. This paper presents an analysis of mobility parameters, such as distance, cost, travel time, and carbon footprint, for different simulated scenarios in a large metropolis in a developing country. We simulated the scenarios using an open source, large-scale, agent-based Smart City simulator that we developed.}
}

@article{kanashiro2018,
title = "Predicting Software Flaws with Low Complexity Models based on Static Analysis Data",
journal = "Journal of Information Systems Engineering and Management",
year = "2018",
doi = "https://doi.org/10.20897/jisem.201817",
url = "http://www.lectitopublishing.nl/Article/Detail/predicting-software-flaws-with-low-complexity-models-based-on-static-analysis-data",
author = "Lucas Kanashiro and Athos Ribeiro and David Silva and Paulo Meirelles and Antonio Terceiro",
keywords = "source code static analysis, source code metrics, common weakness enumeration, prediction, linux",
abstract = "Due to the constant evolution of technology, each day brings new programming languages, development
paradigms, and ways of evaluating processes. This is no different with source code metrics, where there is
always new metric classes. To use a software metric to support decisions, it is necessary to understand how
to perform the metric collection, calculation, interpretation, and analysis. The tasks of collecting and
calculating source code metrics are most often automated, but how should we monitor them during the
software development cycle? Our research aims to assist the software engineer to monitor metrics of
vulnerability threats present in the source code through a reference prediction model, considering that real
world software have non-functional security requirements, which implies the need to know how to monitor
these requirements during the software development cycle. As a first result, this paper presents an empirical
study on the evolution of the Linux project. Based on static analysis data, we propose low complexity models
to study flaws in the Linux source code. About 391 versions of the project were analyzed by mining the
official Linux repository using an approach that can be reproduced to perform similar studies. Our results
show that it is possible to predict the number of warnings triggered by a static analyzer for a given software
project revision as long as the software is continuously monitored."
}

@article{interscityFGCS2019,
title = "Design and evaluation of a scalable smart city software platform with large-scale simulations",
journal = "Future Generation Computer Systems",
volume = "93",
pages = "427 - 441",
year = "2019",
author = "Arthur de M. Del Esposte and Eduardo F. Z. Santana and Lucas Kanashiro and Fabio M. Costa and Kelly R. Braghetto and Nelson Lago and Fabio Kon",
}
